{"version":3,"sources":["context/selected/selected.context.jsx","component/character/character.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SelectedContext","createContext","selected","setSelected","data","require","Character","children","id","correctness","correct","undefined","useContext","big5","className","onClick","src","process","alt","App","useState","content","setContent","inputZone","setInputZone","start","setStart","clickBlankCount","setClickBlankCount","characters","split","map","i","idx","autoFocus","value","onChange","e","target","placeholder","disabled","length","input","htmlFor","Provider","text","match","key","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"614MAIeA,G,MAFSC,wBAAc,CAAEC,SAAU,KAAMC,YAAa,QCE/DC,G,MAAOC,EAAQ,KAoBNC,EAlBG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,YAC7BC,EAAU,UACMC,IAAhBF,IACFC,EAAO,qBAAiBD,EAAc,UAAY,UAHD,MAIjBG,qBAAWZ,GAArCE,EAJ2C,EAI3CA,SAAUC,EAJiC,EAIjCA,YACZU,EAAOT,EAAKG,GAClB,OACE,yBAAKO,UAAU,aACb,0BAAMA,UAAWJ,EAASK,QAAS,kBAAMZ,EAAYK,KAClDD,GAEFL,IAAaM,GAAMK,EAClB,yBAAKG,IAAG,UAAKC,iDAAL,YAAwCJ,EAAxC,QAAoDK,IAAKL,IAC/D,OC8EKM,MA5Ff,WAAgB,IAAD,EACiBC,mBAC5B,0yGAFW,mBACNC,EADM,KACGC,EADH,OAIqBF,mBAAS,IAJ9B,mBAING,EAJM,KAIKC,EAJL,OAKaJ,oBAAS,GALtB,mBAKNK,EALM,KAKCC,EALD,OAMmBN,mBAAS,MAN5B,mBAMNlB,EANM,KAMIC,EANJ,OAOiCiB,mBAAS,GAP1C,mBAONO,EAPM,KAOWC,EAPX,KAQPC,EAAaR,EAAQS,MAAM,IAC3BrB,EAAcc,EACjBO,MAAM,IACNC,KAAI,SAACC,EAAGC,GAAJ,OAAYD,IAAMH,EAAWI,MAwBpC,OACE,yBAAKnB,UAAU,OACb,oEACA,8BACE,yBAAKA,UAAU,QACb,0DACA,oDACA,2DAEDW,EAAQ,KACP,8BACES,WAAS,EACTpB,UAAU,eACVqB,MAAOd,EACPe,SAAU,SAAAC,GAAC,OAAIf,EAAWe,EAAEC,OAAOH,QACnCI,YAAY,qDAGhB,4BAAQxB,QAAS,kBAnCrBW,GAAUD,SACI,IAAVA,IACFtB,EAAY,MACZqB,EAAa,OAgC2BgB,UAAWnB,EAAQoB,QACtDhB,EAAQ,QAAU,SAEpBA,EACC,yBAAKX,UAAU,aACb,8BACEoB,WAAS,EACT1B,GAAG,QACH2B,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OA/BHK,EA+BmBL,EAAEC,OAAOH,WA9B9CX,EAAakB,GADK,IAAAA,KAiCV,2BAAOC,QAAQ,SACb,kBAAC,EAAgBC,SAAjB,CACET,MAAO,CAAEjC,SAAUA,EAAUC,YArDrB,SAAA8B,GACpB9B,EAAY8B,IAAQ/B,EAAW,KAAO+B,GACtCL,EAAmB,MAqDP,yBAAKd,UAAU,cAAcC,QAAS,kBA3ClDa,EAAmBD,EAAkB,QACjCA,EAAkB,IACpBC,EAAmB,GACnBzB,EAAY,UAyCCkB,EAAQS,MAAM,IAAIC,KAAI,SAACc,EAAMZ,GAC5B,OAAOY,EAAKC,MAAM,OAChB,wBAAIC,IAAKd,IAET,kBAAC,EAAD,CACEc,IAAKd,EACLzB,GAAIyB,EACJxB,YAAaA,EAAYwB,IAExBY,UAQb,QC/EQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCZNM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a02c2d8.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst SelectedContext = createContext({ selected: null, setSelected: null });\n\nexport default SelectedContext;\n","import React, { useContext } from \"react\";\nimport SelectedContext from \"../../context/selected/selected.context\";\n\nimport \"./character.styles.scss\";\nconst data = require(\"../../big5.json\");\n\nconst Character = ({ children, id, correctness }) => {\n  let correct = null;\n  if (correctness !== undefined)\n    correct = `character__${correctness ? \"correct\" : \"wrong\"}`;\n  const { selected, setSelected } = useContext(SelectedContext);\n  const big5 = data[children];\n  return (\n    <div className=\"character\">\n      <span className={correct} onClick={() => setSelected(id)}>\n        {children}\n      </span>\n      {selected === id && big5 ? (\n        <img src={`${process.env.REACT_APP_FILE_PATH}/${big5}.JPG`} alt={big5} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Character;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Character from \"./component/character/character.component\";\nimport SelectedContext from \"./context/selected/selected.context\";\n\nfunction App() {\n  const [content, setContent] = useState(\n    \"有人說邰哥你很棒啊我說這有什麼棒的剛好我會而已老天爺給你天賦你就善盡你會的東西沒什麼了不起邰智源主持的木曜四超玩成為第一個突破百萬訂閱的網路綜藝節目去年才傳出資金燒光得接業配苦撐今年七月就聯手柯讓一日幕僚該集衝出千萬點擊率如今以呈現各行各業甘苦風貌的一日系列基本都有百萬以上人次觀看這個在邰智源腦中醞釀五年的案子曾被拒於電視台門外轉往網路後反而如魚得水不僅上山下海大玩實境秀業配也接得光明正大處處可見甩脫傳統電視台包袱的靈活操作職業這種東西很多人都做過就像你拍紅樓夢已經一堆人演過不稀奇了只是由誰演從誰的角度去看如果體驗者是年輕人換成一個年過半百快掛了的人他還願意去嘗試就是一個新東西從電視跨進網路讓他重獲創作自由更藉此打造出全新商業模式電視台體制下的節目製作業務部門乃至廣告商等各自為政木曜四超玩團隊卻一條龍包辦將廣告與節目無縫接軌量身訂製的業配內容讓網友與廠商都甘願買單這是好事因為出錢是老大這件事情會被打破創作者才是老大廣告主能透過這個模式直接與創作者溝通不需透過中間商剝削身兼最老網紅資深藝人分屬新舊世代的兩種身分邰智源顯得游刃有餘此外他還主張尊重年輕人的創意聽他們的話耳朵打開不要故步自封自以為是有爭執的時候來我們好好的吵吵完以後如果你講得真的有道理那就全部聽你的而這也正是這位阿公網紅不被革命浪潮淹沒的成功祕訣\"\n  );\n  const [inputZone, setInputZone] = useState(\"\");\n  const [start, setStart] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [clickBlankCount, setClickBlankCount] = useState(0);\n  const characters = content.split(\"\");\n  const correctness = inputZone\n    .split(\"\")\n    .map((i, idx) => i === characters[idx]);\n\n  const alterSelected = idx => {\n    setSelected(idx === selected ? null : idx);\n    setClickBlankCount(0);\n  };\n  const updateState = () => {\n    setStart(!start);\n    if (start === false) {\n      setSelected(null);\n      setInputZone(\"\");\n    }\n  };\n  const clickBlank = () => {\n    setClickBlankCount(clickBlankCount + 1);\n    if (clickBlankCount > 0) {\n      setClickBlankCount(0);\n      setSelected(null);\n    }\n  };\n  const updateInput = input => {\n    setInputZone(input);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>中文打字練習</h1>\n      <main>\n        <div className=\"stat\">\n          <span>所用時間</span>\n          <span>精準度</span>\n          <span>打字速度</span>\n        </div>\n        {start ? null : (\n          <textarea\n            autoFocus\n            className=\"inputcontent\"\n            value={content}\n            onChange={e => setContent(e.target.value)}\n            placeholder=\"在此貼上練習材料\"\n          ></textarea>\n        )}\n        <button onClick={() => updateState()} disabled={!content.length}>\n          {start ? \"Puase\" : \"Start\"}\n        </button>\n        {start ? (\n          <div className=\"inputarea\">\n            <textarea\n              autoFocus\n              id=\"arena\"\n              value={inputZone}\n              onChange={e => updateInput(e.target.value)}\n            ></textarea>\n            <label htmlFor=\"arena\">\n              <SelectedContext.Provider\n                value={{ selected: selected, setSelected: alterSelected }}\n              >\n                <div className=\"mainarticle\" onClick={() => clickBlank()}>\n                  {content.split(\"\").map((text, idx) => {\n                    return text.match(/\\n/g) ? (\n                      <br key={idx} />\n                    ) : (\n                      <Character\n                        key={idx}\n                        id={idx}\n                        correctness={correctness[idx]}\n                      >\n                        {text}\n                      </Character>\n                    );\n                  })}\n                </div>\n              </SelectedContext.Provider>\n            </label>\n          </div>\n        ) : null}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}